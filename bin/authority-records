#!/usr/bin/env python
from terminusdb_client import Client
import terminusdb_client.query_syntax as w
import json

gensym_counter = 0
def gensym(s):
    global gensym_counter
    gensym_counter += 1
    return f"s_{gensym_counter}"

def query_label(entity, prop, label):
    node = w.variables(gensym(entity.name + "_node"))

    return w.once(w.select(label, w.triple(entity, prop, node) & w.triple(node, 'rdfs:label', label)))

def or_val(var, query, val):
    return w.once(w.woql_or(query,
                            w.equals(var, val)))

def query_authoritative_labels(entity, prop, labels):
    (node,label, intermediate) = w.variables(gensym(entity.name + "_node"), "label", "intermediate_labels")

    return or_val(labels,
                  w.group_by([entity], label, labels,
                             (
                                 w.triple(entity, prop, node) &
                                 w.triple(node, 'madsrdf:authoritativeLabel', label))),
                  [])

def strip_jsonld(record):
    if isinstance(record, dict):
        if '@value' in record:
            return record['@value']

        result = {}
        for k in record:
            result[k] = strip_jsonld(record[k])

        return result
    elif isinstance(record, list):
        result = []
        for l in record:
            result.append(strip_jsonld(l))
        return result
    else:
        return record

def query_citation(citation, result):
    (note, source) = w.variables(gensym('note'), gensym('source'))
    result_template = w.Doc({'@id': citation,
                             'note': note,
                             'source': source})

    return (w.triple(citation, 'madsrdf:citationNote', note) &
            w.opt(w.triple(citation, 'madsrdf:citationSource', source)) &
            w.equals(result, result_template))

def query_citations(name_id, result):
    (citation_node,citation) = w.variables(gensym('citation_node'), gensym('citation'))
    return or_val(result,
                  w.group_by([name_id], citation, result,
                             (w.triple(name_id, 'madsrdf:hasSource', citation_node) &
                              query_citation(citation_node, citation))),
                  [])

def name_record(name_id, result):
    (citations,name_string) = w.variables(gensym('citations'), gensym('name_string'))
    result_template = w.Doc({'@id': name_id,
                             'citations': citations,
                             'name': name_string
                             })

    return (w.opt(w.triple(name_id, 'madsrdf:authoritativeLabel', name_string)) &
            query_citations(name_id, citations) &
            w.equals(result, result_template))

def name_records(person, names):
    (name_id,name) = w.variables(gensym('name_id'), gensym('name'))
    return w.opt((w.triple(name_id, 'madsrdf:identifiesRWO', person) &
                  w.group_by([person], name, names,
                             name_record(name_id, name))))

if __name__ == '__main__':
    client = Client("http://localhost:6363")
    client.connect(db='loc')
    (person,label,gender,birthplace,occupations, death_date, names, result)=w.variables('person','label','gender','birthplace','occupations','death_date', 'names', 'result')

    result_template = w.Doc({'@id': person,
                             'label': label,
                             'gender': gender,
                             'birthplace': birthplace,
                             'occupation': occupations,
                             'deathDate': death_date,
                             'names': names})

    query = (w.triple(person, 'rdf:type', 'bf:Person') &
             w.triple(person, 'rdfs:label', label) &
             w.opt(query_label(person, 'madsrdf:gender', gender)) &
             w.opt(query_label(person, 'madsrdf:birthPlace', birthplace)) &
             query_authoritative_labels(person, 'madsrdf:occupation', occupations) &
             w.opt(query_label(person, 'madsrdf:deathDate', death_date)) &
             name_records(person, names) &
             w.equals(result, result_template))

    query = w.select(result, w.distinct(person, query))

    results = client.query(query, streaming=True)
    for result in results:
        print(json.dumps(strip_jsonld(result['result'])))
