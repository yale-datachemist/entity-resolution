#!/usr/bin/env python3
from rdflib import RDF, RDFS, SKOS, OWL
import argparse
import sys
import json

CLASS_HIERARCHY = {}
CLASS_REGISTRY = { 'owl:Thing' : {}}
PROPERTY_HIERARCHY = {}
PROPERTY_REGISTRY = {}
TERMINUS_REGISTRY = {}

def add_class_to_super(cls,sup,g):
    global CLASS_HIERARCHY
    if sup.n3(g.namespace_manager) in CLASS_HIERARCHY:
        CLASS_HIERARCHY[sup.n3(g.namespace_manager)].append(cls.n3(g.namespace_manager))
    else:
        CLASS_HIERARCHY[sup.n3(g.namespace_manager)] = [cls.n3(g.namespace_manager)]

def add_super_to_prop(prop,sup,g):
    global PROPERTY_HIERARCHY
    PROPERTY_HIERARCHY[prop.n3(g.namespace_manager)] = sup.n3(g.namespace_manager)

def register_classes(g):
    for cls in g.subjects(RDF.type, OWL.Class):
        for sup in g.objects(cls,RDFS.subClassOf):
            add_class_to_super(cls, sup, g)
        comment_list = []
        for c in g.objects(cls,SKOS.definition):
            comment_list.append(str(c))

        documentation_object = {}
        if comment_list != []:
            comment = ' '.join(comment_list)
            documentation_object['@description'] = comment

        label_list = []
        for l in g.objects(cls,RDFS.label,unique=True):
            label_list.append(str(l))
        if label_list != []:
            label = ' '.join(label_list)
            documentation_object['@label'] = label
        CLASS_REGISTRY[cls.n3(g.namespace_manager)] = {
            '@documentation' : documentation_object,
            '@type' : "Class",
            '@id' : cls.n3(g.namespace_manager)
        }

def register_property_hierarchy(g):
    eprint("How many properties will I register?")
    for prop in g.subjects(RDF.type, OWL.ObjectProperty):
        eprint(f"property {prop.n3(g.namespace_manager)}")

        for sup in g.objects(prop, RDFS.subPropertyOf,unique=True):
            eprint(f"add {prop} and {sup}")
            add_super_to_prop(prop, sup, g)


    for prop in g.subjects(RDF.type, OWL.DatatypeProperty):
        eprint(f"property {prop.n3(g.namespace_manager)}")

        for sup in g.objects(prop, RDFS.subPropertyOf,unique=True):
            eprint(f"add {prop} and {sup}")
            add_super_to_prop(prop, sup ,g)


def prop_key(p, key, g):
    prop_record = PROPERTY_REGISTRY[p]
    domain = None
    while True:
        if key in prop_record:
            eprint(f"prop_record[{key}]: {prop_record[key]}")
            return prop_record[key]
        else:
            if key in PROPERTY_HIERARCHY:
                sup = PROPERTY_HIERARCHY[key]
                prop_record = PROPERTY_REGISTRY[sup]
            else:
                return None

def property_domain(p, g):
    return prop_key(p, 'domain', g)

def property_range(p, g):
    return prop_key(p, 'range', g)

def register_properties(g):
    for prop in g.subjects(RDF.type, OWL.ObjectProperty):
        property_record = {'type' : 'ObjectProperty'}
        for domain in g.objects(prop, RDFS.domain):
           property_record['domain'] = domain.n3(g.namespace_manager)
        for rng in g.objects(prop, RDFS.range, unique=True):
           property_record['range'] = rng.n3(g.namespace_manager)

        comments = []
        for skos_comment in g.objects(prop, SKOS.definition):
            comments.append(str(skos_comment))
        for this_comment in g.objects(prop, RDFS.comment):
            comments.append(str(this_comment))
        if comments != []:
            property_record['comment'] = '\n'.join(comments)

        label = next(g.objects(prop, RDFS.label, unique=True))
        if label:
            property_record['label'] = str(label)

        PROPERTY_REGISTRY[prop.n3(g.namespace_manager)] = property_record

    for prop in g.subjects(RDF.type, OWL.DatatypeProperty):
        property_record = {'type' : 'DatatypeProperty'}
        for domain in g.objects(prop, RDFS.domain):
           property_record['domain'] = domain.n3(g.namespace_manager)
        for rng in g.objects(prop, RDFS.range, unique=True):
           property_record['range'] = rng.n3(g.namespace_manager)

        comments = []
        for skos_comment in g.objects(prop, SKOS.definition):
            comments.append(str(skos_comment))
        for this_comment in g.objects(prop, RDFS.comment):
            comments.append(str(this_comment))
        if comments != []:
            property_record['comment'] = '\n'.join(comments)

        label = next(g.objects(prop, RDFS.label, unique=True))
        if label:
            property_record['label'] = str(label)

        PROPERTY_REGISTRY[prop.n3(g.namespace_manager)] = property_record

def eprint(string):
    pass
    # print(string, file=sys.stderr)

def add_properties_to_classes(g):
    for prop in PROPERTY_REGISTRY:
        prop_record = PROPERTY_REGISTRY[prop]

        domain = property_domain(prop, g)
        if domain is None:
            domain = OWL.Thing.n3(g.namespace_manager)

        rng = property_range(prop, g)
        if rng is None:
            rng = OWL.Thing.n3(g.namespace_manager)

        cls = CLASS_REGISTRY[domain]
        if not '@documentation' in cls:
            cls['@documentation'] = {}
        doc_record = cls['@documentation']
        if not '@properties' in doc_record:
            doc_record['@properties'] = {}
        doc_property_record = doc_record['@properties']

        new_doc_record = {}
        if 'comment' in prop_record:
            new_doc_record['@comment'] = prop_record['comment']
        if 'label' in prop_record:
            new_doc_record['@label'] = prop_record['label']
        if new_doc_record != {}:
            doc_property_record[prop] = new_doc_record
        cls[prop] = { '@type' : 'Set', '@class': rng }

if __name__ == '__main__' :
    from rdflib import Graph

    parser = argparse.ArgumentParser()
    parser.add_argument("file", help="input owl file")
    parser.add_argument("-f", "--format", default="turtle", help="input format of OWL file")
    args = parser.parse_args()
    g = Graph()
    g.parse(args.file, args.format)

    register_classes(g)
    register_property_hierarchy(g)
    register_properties(g)
    add_properties_to_classes(g)

    ctx = {'@type' : '@context',
           '@base' : 'iri://d/',
           '@schema' : 'http://id.loc.gov/ontologies/bibframe/'}
    for (name,iri) in g.namespace_manager.namespaces():
        ctx[name] = str(iri)
    print(json.dumps(ctx))

    for cls in CLASS_REGISTRY:
        print(json.dumps(CLASS_REGISTRY[cls]))
