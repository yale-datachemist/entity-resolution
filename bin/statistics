#!/usr/bin/env python
import csv
import argparse
import json

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("--matches", "-m", help="Matches csv from VectorLink output")
    parser.add_argument("--results", "-r", help="Correct results")
    parser.add_argument("--name-agent-map", "-n", help="File with Name <> Auth map")
    args = parser.parse_args()

    name_agent_map = {}
    match_fields = ['name', 'auth']
    with open(args.name_agent_map, 'r') as f:
        r = csv.DictReader(f, fieldnames=match_fields)
        for d in r:
            name_agent_map[d['name']] = d['auth']
    print('loaded name agent map')

    match_fields = ['unindexed', 'indexed', 'distance']
    matches = {}
    with open(args.matches, 'r') as f:
        r = csv.DictReader(f, fieldnames=match_fields)
        for d in r:
            matches[d['unindexed']] = { 'indexed': d['indexed'],
                                        'distance' : d['distance']}
    print('loaded matches')

    total = 0
    relevant = 0
    positive = 0
    found_name = 0
    print('done loading, proceeding to iterating over the result csv')
    with open(args.results, 'r') as f:
        r = csv.DictReader(f)
        for d in r:
            total += 1
            gen_id = d['Gen_ID']
            name_id = d['LC_ID']
            if gen_id in matches:
                m = matches[gen_id]
            elif name_id in matches:
                m = matches[name_id]
            else:
                continue
            relevant += 1
            if name_id in name_agent_map:
                found_name += 1
                agent_id = name_agent_map[name_id]
                print(f"agent id: {agent_id}, search result: {m['indexed']}, distance: {m['distance']}")
                if agent_id == m['indexed']:
                    positive += 1

    print(f"total: {total}\nrelevant: {relevant}\npositive: {positive}")
    print(f"found name: {found_name}")
    recall = relevant / total
    precision = positive / relevant
    print(f"recall: {recall}\nprecision: {precision}")
